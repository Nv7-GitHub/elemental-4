<div>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">
        Elemental 4
      </a>

      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="navbar-toggler-icon"></span>
      </button>

      <nav class="collapse navbar-collapse" role="navigation">
        <ul class="navbar-nav ml-auto nav">
          <li class="nav-item">
            <a class="nav-link active">Something</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Something Else</a>
          </li>
          <form class="form-inline">
            <button @click="c.NewSuggestion()" vg-attr="vugu.VGAttributeListerFunc(c.SuggestBtn)">Suggest</button>
          </form>
        </ul>
      </nav>
    </div>
  </nav>

  <span vg-if="!c.Init" vg-content='c.Initialize()'>Loading...</span>
  <main:Elemental :Elements="&c.Elements" :Found="&c.Found" :Colors="c.Colors" :Handle="c.Handle" vg-if="c.Logged" :FoundElement="c.FoundElement" :SuggestElement="&c.SuggestElement" :SuggestDisabled='&c.SuggestDisabled' :NewSuggestion="&c.NewSuggestion" :Username="&c.Username"></main:Elemental>
  <main:Login vg-if="!c.Logged" :Handle="c.Handle" :App="c.App" :Logged="c.LoggedIn"></main:Login>
  <main:Networking :App="c.App" :Id="c.Id" :Elements="&c.Elements" :FoundElement="&c.FoundElement" :Handle="c.Handle" :Found="&c.Found" vg-if="c.Logged" :Event="c.Event" :SuggestElement="&c.SuggestElement"></main:Networking>
</div>

<script type="application/x-go">
import . "syscall/js"
import "encoding/hex"
import "github.com/Nv7-Github/firebase"
import "github.com/Nv7-Github/firebase/auth"
import "github.com/Nv7-Github/firebase/db"
import "github.com/vugu/vugu/vgform"
import "encoding/json"
import "sort"

const requiredVotes = 5

type Element struct {
  Name string
  Creator string
  Products map[int]int
  Color int
  Index int
  Created string
}

type User struct {
  Found []int
}

type Suggestion struct {
  NewElement Element
  Producer [2]int
  Votes int
}

// Prototype
var colors = []string{"#B79370", "#B4D8FC", "#FF932E", "#4C93FF"}

var elements = []Element{
  Element{
    Name: "Earth",
    Creator: "Nv7",
    Color: 0,
    Products: map[int]int{
      1: 4,
    },
    Index: 0,
    Created: "At the dawn of time",
  },
  Element{
    Name: "Air",
    Creator:"Nv7",
    Color: 1,
    Products: map[int]int{},
    Index: 1,
    Created: "At the dawn of time",
  },
  Element{
    Name: "Fire",
    Creator:"Nv7",
    Color: 2,
    Products: map[int]int{
      3: 5,
    },
    Index: 2,
    Created: "At the dawn of time",
  },
  Element{
    Name: "Water",
    Creator:"Nv7",
    Color: 3,
    Products: map[int]int{},
    Index: 3,
    Created: "At the dawn of time",
  },
  Element{
    Name: "Dust",
    Creator:"Nv7",
    Color: 0,
    Products: map[int]int{},
    Index: 4,
    Created: "At the dawn of time",
  },
  Element{
    Name: "Acid",
    Creator:"Nv7",
    Color: 3,
    Products: map[int]int{},
    Index: 5,
    Created: "At the dawn of time",
  },
}

var found = []int{0, 1, 2, 3}

type Root struct {
  Init bool `vugu:"data"`
	Showing bool `vugu:"data"`
  Elements []Element `vugu:"data"`
  Found []int `vugu:"data"`
  Colors []string `vugu:"data"`
  App *firebase.Firebase
  Logged bool `vugu:"data"`
  Id string `vugu:"data"`
  FoundElement func([]int)
  SuggestElement func(vugu.EventEnv, Suggestion)
  SuggestDisabled bool `vugu:"data"`
  Event vugu.EventEnv
  NewSuggestion func()
  Username string `vugu:"data"`
}

func (c *Root) Handle(err error) {
  if err != nil {
    panic(err)
  }
}

func (c *Root) Initialize() string {
  c.Colors = colors
  c.Elements = elements

  var err error
  c.App, err = firebase.CreateAppWithServiceAccount(databaseURL, apiKey, []byte(serviceAccount))
  c.Handle(err)
  c.Id = "REE"

  c.SuggestDisabled = true

  c.Init = true
  return ""
}

func (c *Root) LoggedIn(id string, username string, event vugu.EventEnv) {
  event.Lock()
  c.Logged = true
  c.Id = id
  event.UnlockRender()
  c.Event = event
  c.Username = username
}

func (c *Root) SuggestBtn() (ret []vugu.VGAttribute) {
  ret = append(ret, vugu.VGAttribute{
    Key:"class",
    Val:"btn btn-outline-primary my-2 my-sm-0",
  },
  vugu.VGAttribute{
    Key:"type",
    Val:"reset",
  })
  if (c.SuggestDisabled) {
    ret = append(ret, vugu.VGAttribute{
      Key:"disabled",
      Val:"true",
    })
  }
  return
}
</script>
