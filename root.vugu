<div>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">
        Elemental 4
      </a>

      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="navbar-toggler-icon"></span>
      </button>

      <nav class="collapse navbar-collapse" role="navigation">
        <ul class="navbar-nav ml-auto nav">
          <li class="nav-item">
            <a class="nav-link active">Something</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Something Else</a>
          </li>
        </ul>
      </nav>
    </div>
  </nav>

  <span vg-if="!c.Init" vg-content='c.Initialize()'>Loading...</span>
  <main:Elemental :Elements="&c.Elements" :Found="&c.Found" :Colors="c.Colors" :Handle="c.Handle"></main:Elemental>
</div>

<script type="application/x-go">
import . "syscall/js"
import "encoding/hex"

var colors = []string{"#eeeeee", "#ee0000", "#00ee00", "#0000ee"}

type Element struct {
  Name string
  Creator string
  Products map[int]int
  Color int
  Index int
}

type User struct {
  Username string
  Found []int
}

// Prototype
var elements = []Element{
  Element{
    Name: "Air",
    Creator: "Nv7",
    Color: 0,
    Products: map[int]int{
      1: 2,
    },
    Index: 0,
  },
  Element{
    Name: "Fire",
    Creator:"Nv7",
    Color: 1,
    Products: make(map[int]int, 0),
    Index: 1,
  },
  Element{
    Name: "Energy",
    Creator:"Nv7",
    Color: 2,
    Products: make(map[int]int, 0),
    Index: 2,
  },
}

var found = map[int]bool{
  0: true,
  1: true,
}

type Root struct {
  Init bool `vugu:"data"`
	Showing bool `vugu:"data"`
  Elements []Element `vugu:"data"`
  Found map[int]bool `vugu:"data"`
  Colors []string `vugu:"data"`
}

func (c *Root) Handle(err error) {
  if err != nil {
    panic(err)
  }
}

func (c *Root) Initialize() string {
  c.Colors = colors
  c.Found = found
  c.Elements = elements
  return ""
}
</script>
