<div class="networking">
    <span vg-if="!c.Init" vg-content='c.Initialize()'>Loading...</span>
</div>

<script type="application/x-go">
type Networking struct {
    Init bool
    Id string
    App *firebase.Firebase
    Db *db.Db
    Elements *[]Element
    FoundElement *func([]int)
    Handle func(error)
    Found *[]int
    Event vugu.EventEnv
    SuggestElement *func(vugu.EventEnv, Suggestion)
    Loading *bool
}

func (c *Networking) UpdateFound(found []int) {
    c.Db.SetData("/" + c.Id + "/Found", found)
}

func (c *Networking) GetFound() {
    foundData, err := c.Db.Get("/" + c.Id)
    c.Handle(err)
    var found User
    err = json.Unmarshal(foundData, &found)
    c.Handle(err)
    c.Event.Lock()
    (*c.Found) = found.Found
    c.Event.UnlockRender()
}

func (c *Networking) Initialize() string {
    (*c.FoundElement) = func (found []int) {
        go c.UpdateFound(found)
    }
    (*c.SuggestElement) = func (event vugu.EventEnv, suggestion Suggestion) {
        go c.Suggest(event, suggestion)
    }
    c.Db = db.CreateDatabase(c.App)
    c.Init = true
    go c.GetFound()
    return ""
}

func (c *Networking) Suggest(event vugu.EventEnv, suggestion Suggestion) {
    event.Lock()
    (*c.Loading) = true
    event.UnlockRender()

    existingData, err := c.Db.Get("/suggestions")
    var existing map[int]map[int][]Element
    c.Handle(err)
    if string(existingData) != "null" {
        c.Handle(json.Unmarshal(existingData, &existing))
    } else {
        existing = make(map[int]map[int][]Element)
    }

    fmt.Println(existing[suggestion.Producer[0]] == nil)

    if existing[suggestion.Producer[0]] == nil {
        existing[suggestion.Producer[0]] = map[int][]Element{suggestion.Producer[1]: []Element{suggestion.NewElement}}
    } else {
        existing[suggestion.Producer[0]][suggestion.Producer[1]] = append(existing[suggestion.Producer[0]][suggestion.Producer[1]], suggestion.NewElement)
    }

    
    c.Db.SetData("/suggestions", existing)

    event.Lock()
    (*c.Loading) = false
    event.UnlockRender()
}
</script>